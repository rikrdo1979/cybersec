#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = "rikrdo"
__copyright__ = "Copyright 2022, Bootcamp Cybersec "
__credits__ = ["rikrdo"]
__license__ = "GPL"
__version__ = "1.0.1"
__maintainer__ = "rikrdo"
__email__ = "rikrdo@rikrdo.es"
__status__ = "Production"

# required libraries

import requests, argparse, sys

HEADER  = '\033[95m'
BLUE  = '\033[94m'
CYAN  = '\033[96m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
RED    = '\033[91m'
ENDC    = '\033[0m' 
BOLD    = '\033[1m' 
UNDERLINE ='\033[4m'

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--url", help="url", required=True)
parser.add_argument("-p", "--payloads", help="payloads list" , required=True)
args = parser.parse_args()

def fuzz(url, payloads):
    for payload in open(payloads, "r").readlines():
        new_url = url.replace('{fuzz}', payload)
        request = requests.get(new_url)
        print("REQUEST: ",request.elapsed.total_seconds())
        if request.elapsed.total_seconds() > 7:
            print(RED,"Timeout detected: ", new_url, ENDC)
        else:
            print(CYAN, "Not work with this payload: ", payload, ENDC)
def verif(url):
    url_test = url.replace("{fuzz}", "")
    req = requests.get(url_test)
    print("REQ: ",req.elapsed.total_seconds())
    if req.elapsed.total_seconds() > 6:
        sys.exit(RED+"Please make sure you have a good connection to run scanner"+ENDC)
    else:
        fuzz(args.url, args.payloads)

if not '{fuzz}' in args.url:
    sys.exit(RED+"Missing {fuzz} parameter"+ENDC)
else:
    verif(args.url)
