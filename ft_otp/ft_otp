#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = "rikrdo"
__copyright__ = "Copyright 2022, Bootcamp Cybersec "
__credits__ = ["rikrdo"]
__license__ = "GPL"
__version__ = "1.0.1"
__maintainer__ = "rikrdo"
__email__ = "rikrdo@rikrdo.es"
__status__ = "Production"

import base64, os, argparse, hmac, time, io, qrcode
from cryptography.fernet import Fernet
from time import sleep

# encrypt files
def encrypt(filename):
    key = '2j3XrJLoNkrAzI0GCRl5IvAgCJPxgPxWI5QfCV8AZkY=%'
    fernet = Fernet(key)
    with open(filename, 'rb') as files:
      	original = files.read()
    encrypted = fernet.encrypt(original)
    with open(filename, 'wb') as encrypted_files:
       	encrypted_files.write(encrypted)

# save the given key in a file
def save_key(key, filename):
    secret = bytes(key, 'utf-8').hex()
    f = open(filename, 'w')
    f.write(secret)
    f.close()
    f.closed
    print('\nNew Hex Secret:\n\n\033[1m', secret, '\033[0m\n')
    qr = qrcode.QRCode()
    key = bytes(key, 'utf-8')
    key = base64.b32encode(key)
    qr.add_data('otpauth://totp/rikrdo@cybersec.es?secret='+str(key, 'utf-8')+'&issuer=ft_otp')
    print('URI for Google Authenticator\n\n\033[1motpauth://totp/rikrdo@cybersec.es?secret='+str(key, 'utf-8')+'&issuer=ft_otp\033[0m')
    f = io.StringIO()
    qr.print_ascii(out=f)
    f.seek(0)
    print(f.read())
    sleep(.5)
    encrypt(filename)
    
def totp(key, interval):
    key = bytes.fromhex(key)
    """ Calculate TOTP using time and key """
    now = int(time.time() // interval)
    msg = now.to_bytes(8, "big")
    digest = hmac.new(key, msg, "sha1").digest()
    offset = digest[19] & 15
    code = digest[offset : offset + 4]
    code = (int.from_bytes(code, "big") & 0x7FFFFFFF) % 1000000
    return "{:06d}".format(code)
       
# decrypt files
def decrypt(filename):
    if os.path.isfile('./'+filename):
        key = '2j3XrJLoNkrAzI0GCRl5IvAgCJPxgPxWI5QfCV8AZkY=%'

        fernet = Fernet(key)

        with open(filename, 'rb') as enc_file:
            encrypted = enc_file.read()

        decrypted = fernet.decrypt(encrypted)
        interval = 30
        key = (decrypted.decode('UTF-8'))
        print('Temporary Key (',str(interval),' secs ): ', totp(key, interval))
    else:
        print('\033[91m\t[', filename, '] Is not a encrypted file \u2716\033[0m')

def main(): 
    parser = argparse.ArgumentParser()
    parser.add_argument('-g', help = 'keep the given ex64 key in a encrypted file')
    parser.add_argument('-k', action = 'store_true' ,help = 'show temporary password')
    parser.add_argument('-f', default= 'ft_otp.key' ,help='save the key in the given filename')
    args = parser.parse_args()  
    
    key = args.g
    filename = args.f
    
    if args.g:
        save_key(key, filename)
    if args.k:
        decrypt(filename)

if __name__=='__main__':
    main()
