#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os, sys, time, datetime
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

def writedown(src_path, event):
   dt = datetime.datetime.now()
   current_datetime = dt.strftime("%d-%m-%Y - %H:%M:%S")
   with open("irondome.log","a") as file:
   	file.write(current_datetime+' - '+event+'\n')
   	file.close()
   return(True)

class MonitorFolder(FileSystemEventHandler):
    FILE_SIZE=1000
    
    def on_created(self, event):
         print(event.src_path, event.event_type)
         event_created = event.src_path, event.event_type
         writedown(src_path, str(event_created))
         self.checkFolderSize(event.src_path)
   
    def on_modified(self, event):
        print(event.src_path, event.event_type)
        evento_modified = event.src_path, event.event_type
        writedown(src_path, str(evento_modified))
        self.checkFolderSize(event.src_path)
                  
    def checkFolderSize(self,src_path):
        if os.path.isdir(src_path):
            if os.path.getsize(src_path) >self.FILE_SIZE:
                print("Time to backup the dir")
        else:
            if os.path.getsize(src_path) >self.FILE_SIZE:
                print("very big file")

if __name__ == "__main__":
    src_path = sys.argv[1]
    
    event_handler=MonitorFolder()
    observer = Observer()
    observer.schedule(event_handler, path=src_path, recursive=True)
    print("Monitoring started")
    observer.start()
    try:
        while(True):
           time.sleep(1)
           
    except KeyboardInterrupt:
            observer.stop()
            observer.join()